/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.im.message.NetworkMessage', null, global);
goog.exportSymbol('proto.im.message.NetworkMessage.BytesList', null, global);
goog.exportSymbol('proto.im.message.NetworkMessage.DisconnectMessage', null, global);
goog.exportSymbol('proto.im.message.NetworkMessage.DocumentMessage', null, global);
goog.exportSymbol('proto.im.message.NetworkMessage.EventMessage', null, global);
goog.exportSymbol('proto.im.message.NetworkMessage.HandshakeMessage', null, global);
goog.exportSymbol('proto.im.message.NetworkMessage.InvalidMessage', null, global);
goog.exportSymbol('proto.im.message.NetworkMessage.KeepAliveMessage', null, global);
goog.exportSymbol('proto.im.message.NetworkMessage.OrderMessage', null, global);
goog.exportSymbol('proto.im.message.NetworkMessage.ResultMessage', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.message.NetworkMessage = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, proto.im.message.NetworkMessage.oneofGroups_);
};
goog.inherits(proto.im.message.NetworkMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.im.message.NetworkMessage.displayName = 'proto.im.message.NetworkMessage';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.im.message.NetworkMessage.oneofGroups_ = [[7,8,9,10,11,12,13,14,15]];

/**
 * @enum {number}
 */
proto.im.message.NetworkMessage.MessageCase = {
	MESSAGE_NOT_SET: 0,
	HANDSHAKEMESSAGE: 7,
	ORDERMESSAGE: 8,
	DOCUMENTMESSAGE: 9,
	EVENTMESSAGE: 10,
	INVALIDMESSAGE: 11,
	KEEPALIVEMESSAGE: 12,
	DISCONNECTMESSAGE: 13,
	RESULTMESSAGE: 14,
	BYTESLIST: 15
};

/**
 * @return {proto.im.message.NetworkMessage.MessageCase}
 */
proto.im.message.NetworkMessage.prototype.getMessageCase = function() {
	return /** @type {proto.im.message.NetworkMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.im.message.NetworkMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.prototype.toObject = function(opt_includeInstance) {
		return proto.im.message.NetworkMessage.toObject(opt_includeInstance, this);
	};
	
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.im.message.NetworkMessage} msg The msg instance to transform.
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.toObject = function(includeInstance, msg) {
		var f, obj = {
			messageid: msg.getMessageid(),
			type: msg.getType(),
			fromuser: msg.getFromuser(),
			fromconversation: msg.getFromconversation(),
			touser: msg.getTouser(),
			toconversation: msg.getToconversation(),
			handshakemessage: (f = msg.getHandshakemessage()) && proto.im.message.NetworkMessage.HandshakeMessage.toObject(includeInstance, f),
			ordermessage: (f = msg.getOrdermessage()) && proto.im.message.NetworkMessage.OrderMessage.toObject(includeInstance, f),
			documentmessage: (f = msg.getDocumentmessage()) && proto.im.message.NetworkMessage.DocumentMessage.toObject(includeInstance, f),
			eventmessage: (f = msg.getEventmessage()) && proto.im.message.NetworkMessage.EventMessage.toObject(includeInstance, f),
			invalidmessage: (f = msg.getInvalidmessage()) && proto.im.message.NetworkMessage.InvalidMessage.toObject(includeInstance, f),
			keepalivemessage: (f = msg.getKeepalivemessage()) && proto.im.message.NetworkMessage.KeepAliveMessage.toObject(includeInstance, f),
			disconnectmessage: (f = msg.getDisconnectmessage()) && proto.im.message.NetworkMessage.DisconnectMessage.toObject(includeInstance, f),
			resultmessage: (f = msg.getResultmessage()) && proto.im.message.NetworkMessage.ResultMessage.toObject(includeInstance, f),
			byteslist: (f = msg.getByteslist()) && proto.im.message.NetworkMessage.BytesList.toObject(includeInstance, f)
		};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.message.NetworkMessage}
 */
proto.im.message.NetworkMessage.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.im.message.NetworkMessage;
	return proto.im.message.NetworkMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.message.NetworkMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.message.NetworkMessage}
 */
proto.im.message.NetworkMessage.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setMessageid(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setType(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setFromuser(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setFromconversation(value);
				break;
			case 5:
				var value = /** @type {string} */ (reader.readString());
				msg.setTouser(value);
				break;
			case 6:
				var value = /** @type {string} */ (reader.readString());
				msg.setToconversation(value);
				break;
			case 7:
				var value = new proto.im.message.NetworkMessage.HandshakeMessage;
				reader.readMessage(value,proto.im.message.NetworkMessage.HandshakeMessage.deserializeBinaryFromReader);
				msg.setHandshakemessage(value);
				break;
			case 8:
				var value = new proto.im.message.NetworkMessage.OrderMessage;
				reader.readMessage(value,proto.im.message.NetworkMessage.OrderMessage.deserializeBinaryFromReader);
				msg.setOrdermessage(value);
				break;
			case 9:
				var value = new proto.im.message.NetworkMessage.DocumentMessage;
				reader.readMessage(value,proto.im.message.NetworkMessage.DocumentMessage.deserializeBinaryFromReader);
				msg.setDocumentmessage(value);
				break;
			case 10:
				var value = new proto.im.message.NetworkMessage.EventMessage;
				reader.readMessage(value,proto.im.message.NetworkMessage.EventMessage.deserializeBinaryFromReader);
				msg.setEventmessage(value);
				break;
			case 11:
				var value = new proto.im.message.NetworkMessage.InvalidMessage;
				reader.readMessage(value,proto.im.message.NetworkMessage.InvalidMessage.deserializeBinaryFromReader);
				msg.setInvalidmessage(value);
				break;
			case 12:
				var value = new proto.im.message.NetworkMessage.KeepAliveMessage;
				reader.readMessage(value,proto.im.message.NetworkMessage.KeepAliveMessage.deserializeBinaryFromReader);
				msg.setKeepalivemessage(value);
				break;
			case 13:
				var value = new proto.im.message.NetworkMessage.DisconnectMessage;
				reader.readMessage(value,proto.im.message.NetworkMessage.DisconnectMessage.deserializeBinaryFromReader);
				msg.setDisconnectmessage(value);
				break;
			case 14:
				var value = new proto.im.message.NetworkMessage.ResultMessage;
				reader.readMessage(value,proto.im.message.NetworkMessage.ResultMessage.deserializeBinaryFromReader);
				msg.setResultmessage(value);
				break;
			case 15:
				var value = new proto.im.message.NetworkMessage.BytesList;
				reader.readMessage(value,proto.im.message.NetworkMessage.BytesList.deserializeBinaryFromReader);
				msg.setByteslist(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.im.message.NetworkMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.serializeBinaryToWriter = function(message, writer) {
	message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.message.NetworkMessage.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	this.serializeBinaryToWriter(writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.prototype.serializeBinaryToWriter = function (writer) {
	var f = undefined;
	f = this.getMessageid();
	if (f.length > 0) {
		writer.writeString(
			1,
			f
		);
	}
	f = this.getType();
	if (f !== 0) {
		writer.writeInt32(
			2,
			f
		);
	}
	f = this.getFromuser();
	if (f.length > 0) {
		writer.writeString(
			3,
			f
		);
	}
	f = this.getFromconversation();
	if (f.length > 0) {
		writer.writeString(
			4,
			f
		);
	}
	f = this.getTouser();
	if (f.length > 0) {
		writer.writeString(
			5,
			f
		);
	}
	f = this.getToconversation();
	if (f.length > 0) {
		writer.writeString(
			6,
			f
		);
	}
	f = this.getHandshakemessage();
	if (f != null) {
		writer.writeMessage(
			7,
			f,
			proto.im.message.NetworkMessage.HandshakeMessage.serializeBinaryToWriter
		);
	}
	f = this.getOrdermessage();
	if (f != null) {
		writer.writeMessage(
			8,
			f,
			proto.im.message.NetworkMessage.OrderMessage.serializeBinaryToWriter
		);
	}
	f = this.getDocumentmessage();
	if (f != null) {
		writer.writeMessage(
			9,
			f,
			proto.im.message.NetworkMessage.DocumentMessage.serializeBinaryToWriter
		);
	}
	f = this.getEventmessage();
	if (f != null) {
		writer.writeMessage(
			10,
			f,
			proto.im.message.NetworkMessage.EventMessage.serializeBinaryToWriter
		);
	}
	f = this.getInvalidmessage();
	if (f != null) {
		writer.writeMessage(
			11,
			f,
			proto.im.message.NetworkMessage.InvalidMessage.serializeBinaryToWriter
		);
	}
	f = this.getKeepalivemessage();
	if (f != null) {
		writer.writeMessage(
			12,
			f,
			proto.im.message.NetworkMessage.KeepAliveMessage.serializeBinaryToWriter
		);
	}
	f = this.getDisconnectmessage();
	if (f != null) {
		writer.writeMessage(
			13,
			f,
			proto.im.message.NetworkMessage.DisconnectMessage.serializeBinaryToWriter
		);
	}
	f = this.getResultmessage();
	if (f != null) {
		writer.writeMessage(
			14,
			f,
			proto.im.message.NetworkMessage.ResultMessage.serializeBinaryToWriter
		);
	}
	f = this.getByteslist();
	if (f != null) {
		writer.writeMessage(
			15,
			f,
			proto.im.message.NetworkMessage.BytesList.serializeBinaryToWriter
		);
	}
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.im.message.NetworkMessage} The clone.
 */
proto.im.message.NetworkMessage.prototype.cloneMessage = function() {
	return /** @type {!proto.im.message.NetworkMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string messageid = 1;
 * @return {string}
 */
proto.im.message.NetworkMessage.prototype.getMessageid = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.prototype.setMessageid = function(value) {
	jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 type = 2;
 * @return {number}
 */
proto.im.message.NetworkMessage.prototype.getType = function() {
	return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.im.message.NetworkMessage.prototype.setType = function(value) {
	jspb.Message.setField(this, 2, value);
};


/**
 * optional string fromUser = 3;
 * @return {string}
 */
proto.im.message.NetworkMessage.prototype.getFromuser = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.prototype.setFromuser = function(value) {
	jspb.Message.setField(this, 3, value);
};


/**
 * optional string fromConversation = 4;
 * @return {string}
 */
proto.im.message.NetworkMessage.prototype.getFromconversation = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.prototype.setFromconversation = function(value) {
	jspb.Message.setField(this, 4, value);
};


/**
 * optional string toUser = 5;
 * @return {string}
 */
proto.im.message.NetworkMessage.prototype.getTouser = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.prototype.setTouser = function(value) {
	jspb.Message.setField(this, 5, value);
};


/**
 * optional string toConversation = 6;
 * @return {string}
 */
proto.im.message.NetworkMessage.prototype.getToconversation = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.prototype.setToconversation = function(value) {
	jspb.Message.setField(this, 6, value);
};


/**
 * optional HandshakeMessage handshakeMessage = 7;
 * @return {proto.im.message.NetworkMessage.HandshakeMessage}
 */
proto.im.message.NetworkMessage.prototype.getHandshakemessage = function() {
	return /** @type{proto.im.message.NetworkMessage.HandshakeMessage} */ (
		jspb.Message.getWrapperField(this, proto.im.message.NetworkMessage.HandshakeMessage, 7));
};


/** @param {proto.im.message.NetworkMessage.HandshakeMessage|undefined} value  */
proto.im.message.NetworkMessage.prototype.setHandshakemessage = function(value) {
	jspb.Message.setOneofWrapperField(this, 7, proto.im.message.NetworkMessage.oneofGroups_[0], value);
};


proto.im.message.NetworkMessage.prototype.clearHandshakemessage = function() {
	this.setHandshakemessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.im.message.NetworkMessage.prototype.hasHandshakemessage = function() {
	return jspb.Message.getField(this, 7) != null;
};


/**
 * optional OrderMessage orderMessage = 8;
 * @return {proto.im.message.NetworkMessage.OrderMessage}
 */
proto.im.message.NetworkMessage.prototype.getOrdermessage = function() {
	return /** @type{proto.im.message.NetworkMessage.OrderMessage} */ (
		jspb.Message.getWrapperField(this, proto.im.message.NetworkMessage.OrderMessage, 8));
};


/** @param {proto.im.message.NetworkMessage.OrderMessage|undefined} value  */
proto.im.message.NetworkMessage.prototype.setOrdermessage = function(value) {
	jspb.Message.setOneofWrapperField(this, 8, proto.im.message.NetworkMessage.oneofGroups_[0], value);
};


proto.im.message.NetworkMessage.prototype.clearOrdermessage = function() {
	this.setOrdermessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.im.message.NetworkMessage.prototype.hasOrdermessage = function() {
	return jspb.Message.getField(this, 8) != null;
};


/**
 * optional DocumentMessage documentMessage = 9;
 * @return {proto.im.message.NetworkMessage.DocumentMessage}
 */
proto.im.message.NetworkMessage.prototype.getDocumentmessage = function() {
	return /** @type{proto.im.message.NetworkMessage.DocumentMessage} */ (
		jspb.Message.getWrapperField(this, proto.im.message.NetworkMessage.DocumentMessage, 9));
};


/** @param {proto.im.message.NetworkMessage.DocumentMessage|undefined} value  */
proto.im.message.NetworkMessage.prototype.setDocumentmessage = function(value) {
	jspb.Message.setOneofWrapperField(this, 9, proto.im.message.NetworkMessage.oneofGroups_[0], value);
};


proto.im.message.NetworkMessage.prototype.clearDocumentmessage = function() {
	this.setDocumentmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.im.message.NetworkMessage.prototype.hasDocumentmessage = function() {
	return jspb.Message.getField(this, 9) != null;
};


/**
 * optional EventMessage eventMessage = 10;
 * @return {proto.im.message.NetworkMessage.EventMessage}
 */
proto.im.message.NetworkMessage.prototype.getEventmessage = function() {
	return /** @type{proto.im.message.NetworkMessage.EventMessage} */ (
		jspb.Message.getWrapperField(this, proto.im.message.NetworkMessage.EventMessage, 10));
};


/** @param {proto.im.message.NetworkMessage.EventMessage|undefined} value  */
proto.im.message.NetworkMessage.prototype.setEventmessage = function(value) {
	jspb.Message.setOneofWrapperField(this, 10, proto.im.message.NetworkMessage.oneofGroups_[0], value);
};


proto.im.message.NetworkMessage.prototype.clearEventmessage = function() {
	this.setEventmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.im.message.NetworkMessage.prototype.hasEventmessage = function() {
	return jspb.Message.getField(this, 10) != null;
};


/**
 * optional InvalidMessage invalidMessage = 11;
 * @return {proto.im.message.NetworkMessage.InvalidMessage}
 */
proto.im.message.NetworkMessage.prototype.getInvalidmessage = function() {
	return /** @type{proto.im.message.NetworkMessage.InvalidMessage} */ (
		jspb.Message.getWrapperField(this, proto.im.message.NetworkMessage.InvalidMessage, 11));
};


/** @param {proto.im.message.NetworkMessage.InvalidMessage|undefined} value  */
proto.im.message.NetworkMessage.prototype.setInvalidmessage = function(value) {
	jspb.Message.setOneofWrapperField(this, 11, proto.im.message.NetworkMessage.oneofGroups_[0], value);
};


proto.im.message.NetworkMessage.prototype.clearInvalidmessage = function() {
	this.setInvalidmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.im.message.NetworkMessage.prototype.hasInvalidmessage = function() {
	return jspb.Message.getField(this, 11) != null;
};


/**
 * optional KeepAliveMessage keepaliveMessage = 12;
 * @return {proto.im.message.NetworkMessage.KeepAliveMessage}
 */
proto.im.message.NetworkMessage.prototype.getKeepalivemessage = function() {
	return /** @type{proto.im.message.NetworkMessage.KeepAliveMessage} */ (
		jspb.Message.getWrapperField(this, proto.im.message.NetworkMessage.KeepAliveMessage, 12));
};


/** @param {proto.im.message.NetworkMessage.KeepAliveMessage|undefined} value  */
proto.im.message.NetworkMessage.prototype.setKeepalivemessage = function(value) {
	jspb.Message.setOneofWrapperField(this, 12, proto.im.message.NetworkMessage.oneofGroups_[0], value);
};


proto.im.message.NetworkMessage.prototype.clearKeepalivemessage = function() {
	this.setKeepalivemessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.im.message.NetworkMessage.prototype.hasKeepalivemessage = function() {
	return jspb.Message.getField(this, 12) != null;
};


/**
 * optional DisconnectMessage disconnectMessage = 13;
 * @return {proto.im.message.NetworkMessage.DisconnectMessage}
 */
proto.im.message.NetworkMessage.prototype.getDisconnectmessage = function() {
	return /** @type{proto.im.message.NetworkMessage.DisconnectMessage} */ (
		jspb.Message.getWrapperField(this, proto.im.message.NetworkMessage.DisconnectMessage, 13));
};


/** @param {proto.im.message.NetworkMessage.DisconnectMessage|undefined} value  */
proto.im.message.NetworkMessage.prototype.setDisconnectmessage = function(value) {
	jspb.Message.setOneofWrapperField(this, 13, proto.im.message.NetworkMessage.oneofGroups_[0], value);
};


proto.im.message.NetworkMessage.prototype.clearDisconnectmessage = function() {
	this.setDisconnectmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.im.message.NetworkMessage.prototype.hasDisconnectmessage = function() {
	return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ResultMessage resultMessage = 14;
 * @return {proto.im.message.NetworkMessage.ResultMessage}
 */
proto.im.message.NetworkMessage.prototype.getResultmessage = function() {
	return /** @type{proto.im.message.NetworkMessage.ResultMessage} */ (
		jspb.Message.getWrapperField(this, proto.im.message.NetworkMessage.ResultMessage, 14));
};


/** @param {proto.im.message.NetworkMessage.ResultMessage|undefined} value  */
proto.im.message.NetworkMessage.prototype.setResultmessage = function(value) {
	jspb.Message.setOneofWrapperField(this, 14, proto.im.message.NetworkMessage.oneofGroups_[0], value);
};


proto.im.message.NetworkMessage.prototype.clearResultmessage = function() {
	this.setResultmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.im.message.NetworkMessage.prototype.hasResultmessage = function() {
	return jspb.Message.getField(this, 14) != null;
};


/**
 * optional BytesList bytesList = 15;
 * @return {proto.im.message.NetworkMessage.BytesList}
 */
proto.im.message.NetworkMessage.prototype.getByteslist = function() {
	return /** @type{proto.im.message.NetworkMessage.BytesList} */ (
		jspb.Message.getWrapperField(this, proto.im.message.NetworkMessage.BytesList, 15));
};


/** @param {proto.im.message.NetworkMessage.BytesList|undefined} value  */
proto.im.message.NetworkMessage.prototype.setByteslist = function(value) {
	jspb.Message.setOneofWrapperField(this, 15, proto.im.message.NetworkMessage.oneofGroups_[0], value);
};


proto.im.message.NetworkMessage.prototype.clearByteslist = function() {
	this.setByteslist(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.im.message.NetworkMessage.prototype.hasByteslist = function() {
	return jspb.Message.getField(this, 15) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.message.NetworkMessage.HandshakeMessage = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.im.message.NetworkMessage.HandshakeMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.im.message.NetworkMessage.HandshakeMessage.displayName = 'proto.im.message.NetworkMessage.HandshakeMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.HandshakeMessage.prototype.toObject = function(opt_includeInstance) {
		return proto.im.message.NetworkMessage.HandshakeMessage.toObject(opt_includeInstance, this);
	};
	
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.im.message.NetworkMessage.HandshakeMessage} msg The msg instance to transform.
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.HandshakeMessage.toObject = function(includeInstance, msg) {
		var f, obj = {
			token: msg.getToken(),
			device: msg.getDevice(),
			ip: msg.getIp(),
			appkey: msg.getAppkey(),
			userid: msg.getUserid(),
			sessionid: msg.getSessionid()
		};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.message.NetworkMessage.HandshakeMessage}
 */
proto.im.message.NetworkMessage.HandshakeMessage.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.im.message.NetworkMessage.HandshakeMessage;
	return proto.im.message.NetworkMessage.HandshakeMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.message.NetworkMessage.HandshakeMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.message.NetworkMessage.HandshakeMessage}
 */
proto.im.message.NetworkMessage.HandshakeMessage.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setToken(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setDevice(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setIp(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setAppkey(value);
				break;
			case 5:
				var value = /** @type {string} */ (reader.readString());
				msg.setUserid(value);
				break;
			case 6:
				var value = /** @type {string} */ (reader.readString());
				msg.setSessionid(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.im.message.NetworkMessage.HandshakeMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.HandshakeMessage.serializeBinaryToWriter = function(message, writer) {
	message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	this.serializeBinaryToWriter(writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.serializeBinaryToWriter = function (writer) {
	var f = undefined;
	f = this.getToken();
	if (f.length > 0) {
		writer.writeString(
			1,
			f
		);
	}
	f = this.getDevice();
	if (f.length > 0) {
		writer.writeString(
			2,
			f
		);
	}
	f = this.getIp();
	if (f.length > 0) {
		writer.writeString(
			3,
			f
		);
	}
	f = this.getAppkey();
	if (f.length > 0) {
		writer.writeString(
			4,
			f
		);
	}
	f = this.getUserid();
	if (f.length > 0) {
		writer.writeString(
			5,
			f
		);
	}
	f = this.getSessionid();
	if (f.length > 0) {
		writer.writeString(
			6,
			f
		);
	}
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.im.message.NetworkMessage.HandshakeMessage} The clone.
 */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.cloneMessage = function() {
	return /** @type {!proto.im.message.NetworkMessage.HandshakeMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.getToken = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.setToken = function(value) {
	jspb.Message.setField(this, 1, value);
};


/**
 * optional string device = 2;
 * @return {string}
 */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.getDevice = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.setDevice = function(value) {
	jspb.Message.setField(this, 2, value);
};


/**
 * optional string ip = 3;
 * @return {string}
 */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.getIp = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.setIp = function(value) {
	jspb.Message.setField(this, 3, value);
};


/**
 * optional string appkey = 4;
 * @return {string}
 */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.getAppkey = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.setAppkey = function(value) {
	jspb.Message.setField(this, 4, value);
};


/**
 * optional string userid = 5;
 * @return {string}
 */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.getUserid = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.setUserid = function(value) {
	jspb.Message.setField(this, 5, value);
};


/**
 * optional string sessionid = 6;
 * @return {string}
 */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.getSessionid = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.HandshakeMessage.prototype.setSessionid = function(value) {
	jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.message.NetworkMessage.OrderMessage = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.im.message.NetworkMessage.OrderMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.im.message.NetworkMessage.OrderMessage.displayName = 'proto.im.message.NetworkMessage.OrderMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.OrderMessage.prototype.toObject = function(opt_includeInstance) {
		return proto.im.message.NetworkMessage.OrderMessage.toObject(opt_includeInstance, this);
	};
	
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.im.message.NetworkMessage.OrderMessage} msg The msg instance to transform.
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.OrderMessage.toObject = function(includeInstance, msg) {
		var f, obj = {
			versionid: msg.getVersionid(),
			validtime: msg.getValidtime(),
			expire: msg.getExpire(),
			targetid: msg.getTargetid(),
			type: msg.getType(),
			content: msg.getContent()
		};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.message.NetworkMessage.OrderMessage}
 */
proto.im.message.NetworkMessage.OrderMessage.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.im.message.NetworkMessage.OrderMessage;
	return proto.im.message.NetworkMessage.OrderMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.message.NetworkMessage.OrderMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.message.NetworkMessage.OrderMessage}
 */
proto.im.message.NetworkMessage.OrderMessage.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setVersionid(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setValidtime(value);
				break;
			case 3:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setExpire(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setTargetid(value);
				break;
			case 5:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setType(value);
				break;
			case 6:
				var value = /** @type {string} */ (reader.readString());
				msg.setContent(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.im.message.NetworkMessage.OrderMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.OrderMessage.serializeBinaryToWriter = function(message, writer) {
	message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.message.NetworkMessage.OrderMessage.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	this.serializeBinaryToWriter(writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.OrderMessage.prototype.serializeBinaryToWriter = function (writer) {
	var f = undefined;
	f = this.getVersionid();
	if (f !== 0) {
		writer.writeInt64(
			1,
			f
		);
	}
	f = this.getValidtime();
	if (f !== 0) {
		writer.writeInt64(
			2,
			f
		);
	}
	f = this.getExpire();
	if (f !== 0) {
		writer.writeInt64(
			3,
			f
		);
	}
	f = this.getTargetid();
	if (f.length > 0) {
		writer.writeString(
			4,
			f
		);
	}
	f = this.getType();
	if (f !== 0) {
		writer.writeInt32(
			5,
			f
		);
	}
	f = this.getContent();
	if (f.length > 0) {
		writer.writeString(
			6,
			f
		);
	}
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.im.message.NetworkMessage.OrderMessage} The clone.
 */
proto.im.message.NetworkMessage.OrderMessage.prototype.cloneMessage = function() {
	return /** @type {!proto.im.message.NetworkMessage.OrderMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 versionid = 1;
 * @return {number}
 */
proto.im.message.NetworkMessage.OrderMessage.prototype.getVersionid = function() {
	return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.im.message.NetworkMessage.OrderMessage.prototype.setVersionid = function(value) {
	jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 validtime = 2;
 * @return {number}
 */
proto.im.message.NetworkMessage.OrderMessage.prototype.getValidtime = function() {
	return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.im.message.NetworkMessage.OrderMessage.prototype.setValidtime = function(value) {
	jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 expire = 3;
 * @return {number}
 */
proto.im.message.NetworkMessage.OrderMessage.prototype.getExpire = function() {
	return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.im.message.NetworkMessage.OrderMessage.prototype.setExpire = function(value) {
	jspb.Message.setField(this, 3, value);
};


/**
 * optional string targetid = 4;
 * @return {string}
 */
proto.im.message.NetworkMessage.OrderMessage.prototype.getTargetid = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.OrderMessage.prototype.setTargetid = function(value) {
	jspb.Message.setField(this, 4, value);
};


/**
 * optional int32 type = 5;
 * @return {number}
 */
proto.im.message.NetworkMessage.OrderMessage.prototype.getType = function() {
	return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.im.message.NetworkMessage.OrderMessage.prototype.setType = function(value) {
	jspb.Message.setField(this, 5, value);
};


/**
 * optional string content = 6;
 * @return {string}
 */
proto.im.message.NetworkMessage.OrderMessage.prototype.getContent = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.OrderMessage.prototype.setContent = function(value) {
	jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.message.NetworkMessage.DocumentMessage = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.im.message.NetworkMessage.DocumentMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.im.message.NetworkMessage.DocumentMessage.displayName = 'proto.im.message.NetworkMessage.DocumentMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.DocumentMessage.prototype.toObject = function(opt_includeInstance) {
		return proto.im.message.NetworkMessage.DocumentMessage.toObject(opt_includeInstance, this);
	};
	
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.im.message.NetworkMessage.DocumentMessage} msg The msg instance to transform.
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.DocumentMessage.toObject = function(includeInstance, msg) {
		var f, obj = {
			versionid: msg.getVersionid(),
			type: msg.getType(),
			contentstring: msg.getContentstring(),
			contentbytes: msg.getContentbytes_asB64()
		};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.message.NetworkMessage.DocumentMessage}
 */
proto.im.message.NetworkMessage.DocumentMessage.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.im.message.NetworkMessage.DocumentMessage;
	return proto.im.message.NetworkMessage.DocumentMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.message.NetworkMessage.DocumentMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.message.NetworkMessage.DocumentMessage}
 */
proto.im.message.NetworkMessage.DocumentMessage.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setVersionid(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setType(value);
				break;
			case 6:
				var value = /** @type {string} */ (reader.readString());
				msg.setContentstring(value);
				break;
			case 7:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.setContentbytes(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.im.message.NetworkMessage.DocumentMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.DocumentMessage.serializeBinaryToWriter = function(message, writer) {
	message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.message.NetworkMessage.DocumentMessage.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	this.serializeBinaryToWriter(writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.DocumentMessage.prototype.serializeBinaryToWriter = function (writer) {
	var f = undefined;
	f = this.getVersionid();
	if (f !== 0) {
		writer.writeInt64(
			1,
			f
		);
	}
	f = this.getType();
	if (f !== 0) {
		writer.writeInt32(
			2,
			f
		);
	}
	f = this.getContentstring();
	if (f.length > 0) {
		writer.writeString(
			6,
			f
		);
	}
	f = this.getContentbytes_asU8();
	if (f.length > 0) {
		writer.writeBytes(
			7,
			f
		);
	}
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.im.message.NetworkMessage.DocumentMessage} The clone.
 */
proto.im.message.NetworkMessage.DocumentMessage.prototype.cloneMessage = function() {
	return /** @type {!proto.im.message.NetworkMessage.DocumentMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 versionid = 1;
 * @return {number}
 */
proto.im.message.NetworkMessage.DocumentMessage.prototype.getVersionid = function() {
	return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.im.message.NetworkMessage.DocumentMessage.prototype.setVersionid = function(value) {
	jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 type = 2;
 * @return {number}
 */
proto.im.message.NetworkMessage.DocumentMessage.prototype.getType = function() {
	return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.im.message.NetworkMessage.DocumentMessage.prototype.setType = function(value) {
	jspb.Message.setField(this, 2, value);
};


/**
 * optional string contentString = 6;
 * @return {string}
 */
proto.im.message.NetworkMessage.DocumentMessage.prototype.getContentstring = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.DocumentMessage.prototype.setContentstring = function(value) {
	jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes contentBytes = 7;
 * @return {!(string|Uint8Array)}
 */
proto.im.message.NetworkMessage.DocumentMessage.prototype.getContentbytes = function() {
	return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/**
 * optional bytes contentBytes = 7;
 * This is a type-conversion wrapper around `getContentbytes()`
 * @return {string}
 */
proto.im.message.NetworkMessage.DocumentMessage.prototype.getContentbytes_asB64 = function() {
	return /** @type {string} */ (jspb.Message.bytesAsB64(
		this.getContentbytes()));
};


/**
 * optional bytes contentBytes = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContentbytes()`
 * @return {!Uint8Array}
 */
proto.im.message.NetworkMessage.DocumentMessage.prototype.getContentbytes_asU8 = function() {
	return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
		this.getContentbytes()));
};


/** @param {!(string|Uint8Array)} value  */
proto.im.message.NetworkMessage.DocumentMessage.prototype.setContentbytes = function(value) {
	jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.message.NetworkMessage.EventMessage = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.im.message.NetworkMessage.EventMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.im.message.NetworkMessage.EventMessage.displayName = 'proto.im.message.NetworkMessage.EventMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.EventMessage.prototype.toObject = function(opt_includeInstance) {
		return proto.im.message.NetworkMessage.EventMessage.toObject(opt_includeInstance, this);
	};
	
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.im.message.NetworkMessage.EventMessage} msg The msg instance to transform.
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.EventMessage.toObject = function(includeInstance, msg) {
		var f, obj = {
			versionid: msg.getVersionid(),
			type: msg.getType(),
			content: msg.getContent()
		};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.message.NetworkMessage.EventMessage}
 */
proto.im.message.NetworkMessage.EventMessage.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.im.message.NetworkMessage.EventMessage;
	return proto.im.message.NetworkMessage.EventMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.message.NetworkMessage.EventMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.message.NetworkMessage.EventMessage}
 */
proto.im.message.NetworkMessage.EventMessage.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setVersionid(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setType(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setContent(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.im.message.NetworkMessage.EventMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.EventMessage.serializeBinaryToWriter = function(message, writer) {
	message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.message.NetworkMessage.EventMessage.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	this.serializeBinaryToWriter(writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.EventMessage.prototype.serializeBinaryToWriter = function (writer) {
	var f = undefined;
	f = this.getVersionid();
	if (f !== 0) {
		writer.writeInt64(
			1,
			f
		);
	}
	f = this.getType();
	if (f !== 0) {
		writer.writeInt32(
			2,
			f
		);
	}
	f = this.getContent();
	if (f.length > 0) {
		writer.writeString(
			3,
			f
		);
	}
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.im.message.NetworkMessage.EventMessage} The clone.
 */
proto.im.message.NetworkMessage.EventMessage.prototype.cloneMessage = function() {
	return /** @type {!proto.im.message.NetworkMessage.EventMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 versionid = 1;
 * @return {number}
 */
proto.im.message.NetworkMessage.EventMessage.prototype.getVersionid = function() {
	return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.im.message.NetworkMessage.EventMessage.prototype.setVersionid = function(value) {
	jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 type = 2;
 * @return {number}
 */
proto.im.message.NetworkMessage.EventMessage.prototype.getType = function() {
	return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.im.message.NetworkMessage.EventMessage.prototype.setType = function(value) {
	jspb.Message.setField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.im.message.NetworkMessage.EventMessage.prototype.getContent = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.EventMessage.prototype.setContent = function(value) {
	jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.message.NetworkMessage.InvalidMessage = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.im.message.NetworkMessage.InvalidMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.im.message.NetworkMessage.InvalidMessage.displayName = 'proto.im.message.NetworkMessage.InvalidMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.InvalidMessage.prototype.toObject = function(opt_includeInstance) {
		return proto.im.message.NetworkMessage.InvalidMessage.toObject(opt_includeInstance, this);
	};
	
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.im.message.NetworkMessage.InvalidMessage} msg The msg instance to transform.
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.InvalidMessage.toObject = function(includeInstance, msg) {
		var f, obj = {
			versionid: msg.getVersionid(),
			content: msg.getContent()
		};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.message.NetworkMessage.InvalidMessage}
 */
proto.im.message.NetworkMessage.InvalidMessage.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.im.message.NetworkMessage.InvalidMessage;
	return proto.im.message.NetworkMessage.InvalidMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.message.NetworkMessage.InvalidMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.message.NetworkMessage.InvalidMessage}
 */
proto.im.message.NetworkMessage.InvalidMessage.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setVersionid(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setContent(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.im.message.NetworkMessage.InvalidMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.InvalidMessage.serializeBinaryToWriter = function(message, writer) {
	message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.message.NetworkMessage.InvalidMessage.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	this.serializeBinaryToWriter(writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.InvalidMessage.prototype.serializeBinaryToWriter = function (writer) {
	var f = undefined;
	f = this.getVersionid();
	if (f !== 0) {
		writer.writeInt64(
			1,
			f
		);
	}
	f = this.getContent();
	if (f.length > 0) {
		writer.writeString(
			2,
			f
		);
	}
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.im.message.NetworkMessage.InvalidMessage} The clone.
 */
proto.im.message.NetworkMessage.InvalidMessage.prototype.cloneMessage = function() {
	return /** @type {!proto.im.message.NetworkMessage.InvalidMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 versionid = 1;
 * @return {number}
 */
proto.im.message.NetworkMessage.InvalidMessage.prototype.getVersionid = function() {
	return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.im.message.NetworkMessage.InvalidMessage.prototype.setVersionid = function(value) {
	jspb.Message.setField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.im.message.NetworkMessage.InvalidMessage.prototype.getContent = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.InvalidMessage.prototype.setContent = function(value) {
	jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.message.NetworkMessage.KeepAliveMessage = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.im.message.NetworkMessage.KeepAliveMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.im.message.NetworkMessage.KeepAliveMessage.displayName = 'proto.im.message.NetworkMessage.KeepAliveMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.KeepAliveMessage.prototype.toObject = function(opt_includeInstance) {
		return proto.im.message.NetworkMessage.KeepAliveMessage.toObject(opt_includeInstance, this);
	};
	
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.im.message.NetworkMessage.KeepAliveMessage} msg The msg instance to transform.
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.KeepAliveMessage.toObject = function(includeInstance, msg) {
		var f, obj = {
			sessionid: msg.getSessionid(),
			lastversion: msg.getLastversion()
		};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.message.NetworkMessage.KeepAliveMessage}
 */
proto.im.message.NetworkMessage.KeepAliveMessage.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.im.message.NetworkMessage.KeepAliveMessage;
	return proto.im.message.NetworkMessage.KeepAliveMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.message.NetworkMessage.KeepAliveMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.message.NetworkMessage.KeepAliveMessage}
 */
proto.im.message.NetworkMessage.KeepAliveMessage.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {string} */ (reader.readString());
				msg.setSessionid(value);
				break;
			case 2:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setLastversion(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.im.message.NetworkMessage.KeepAliveMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.KeepAliveMessage.serializeBinaryToWriter = function(message, writer) {
	message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.message.NetworkMessage.KeepAliveMessage.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	this.serializeBinaryToWriter(writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.KeepAliveMessage.prototype.serializeBinaryToWriter = function (writer) {
	var f = undefined;
	f = this.getSessionid();
	if (f.length > 0) {
		writer.writeString(
			1,
			f
		);
	}
	f = this.getLastversion();
	if (f !== 0) {
		writer.writeInt64(
			2,
			f
		);
	}
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.im.message.NetworkMessage.KeepAliveMessage} The clone.
 */
proto.im.message.NetworkMessage.KeepAliveMessage.prototype.cloneMessage = function() {
	return /** @type {!proto.im.message.NetworkMessage.KeepAliveMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string sessionid = 1;
 * @return {string}
 */
proto.im.message.NetworkMessage.KeepAliveMessage.prototype.getSessionid = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.KeepAliveMessage.prototype.setSessionid = function(value) {
	jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 lastversion = 2;
 * @return {number}
 */
proto.im.message.NetworkMessage.KeepAliveMessage.prototype.getLastversion = function() {
	return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.im.message.NetworkMessage.KeepAliveMessage.prototype.setLastversion = function(value) {
	jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.message.NetworkMessage.DisconnectMessage = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.im.message.NetworkMessage.DisconnectMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.im.message.NetworkMessage.DisconnectMessage.displayName = 'proto.im.message.NetworkMessage.DisconnectMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.DisconnectMessage.prototype.toObject = function(opt_includeInstance) {
		return proto.im.message.NetworkMessage.DisconnectMessage.toObject(opt_includeInstance, this);
	};
	
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.im.message.NetworkMessage.DisconnectMessage} msg The msg instance to transform.
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.DisconnectMessage.toObject = function(includeInstance, msg) {
		var f, obj = {
			versionid: msg.getVersionid(),
			sessionid: msg.getSessionid(),
			content: msg.getContent()
		};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.message.NetworkMessage.DisconnectMessage}
 */
proto.im.message.NetworkMessage.DisconnectMessage.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.im.message.NetworkMessage.DisconnectMessage;
	return proto.im.message.NetworkMessage.DisconnectMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.message.NetworkMessage.DisconnectMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.message.NetworkMessage.DisconnectMessage}
 */
proto.im.message.NetworkMessage.DisconnectMessage.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt64());
				msg.setVersionid(value);
				break;
			case 2:
				var value = /** @type {string} */ (reader.readString());
				msg.setSessionid(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setContent(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.im.message.NetworkMessage.DisconnectMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.DisconnectMessage.serializeBinaryToWriter = function(message, writer) {
	message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.message.NetworkMessage.DisconnectMessage.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	this.serializeBinaryToWriter(writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.DisconnectMessage.prototype.serializeBinaryToWriter = function (writer) {
	var f = undefined;
	f = this.getVersionid();
	if (f !== 0) {
		writer.writeInt64(
			1,
			f
		);
	}
	f = this.getSessionid();
	if (f.length > 0) {
		writer.writeString(
			2,
			f
		);
	}
	f = this.getContent();
	if (f.length > 0) {
		writer.writeString(
			3,
			f
		);
	}
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.im.message.NetworkMessage.DisconnectMessage} The clone.
 */
proto.im.message.NetworkMessage.DisconnectMessage.prototype.cloneMessage = function() {
	return /** @type {!proto.im.message.NetworkMessage.DisconnectMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 versionid = 1;
 * @return {number}
 */
proto.im.message.NetworkMessage.DisconnectMessage.prototype.getVersionid = function() {
	return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.im.message.NetworkMessage.DisconnectMessage.prototype.setVersionid = function(value) {
	jspb.Message.setField(this, 1, value);
};


/**
 * optional string sessionid = 2;
 * @return {string}
 */
proto.im.message.NetworkMessage.DisconnectMessage.prototype.getSessionid = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.DisconnectMessage.prototype.setSessionid = function(value) {
	jspb.Message.setField(this, 2, value);
};


/**
 * optional string content = 3;
 * @return {string}
 */
proto.im.message.NetworkMessage.DisconnectMessage.prototype.getContent = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.DisconnectMessage.prototype.setContent = function(value) {
	jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.message.NetworkMessage.ResultMessage = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.im.message.NetworkMessage.ResultMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.im.message.NetworkMessage.ResultMessage.displayName = 'proto.im.message.NetworkMessage.ResultMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.ResultMessage.prototype.toObject = function(opt_includeInstance) {
		return proto.im.message.NetworkMessage.ResultMessage.toObject(opt_includeInstance, this);
	};
	
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.im.message.NetworkMessage.ResultMessage} msg The msg instance to transform.
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.ResultMessage.toObject = function(includeInstance, msg) {
		var f, obj = {
			type: msg.getType(),
			result: msg.getResult(),
			reason: msg.getReason(),
			content: msg.getContent()
		};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.message.NetworkMessage.ResultMessage}
 */
proto.im.message.NetworkMessage.ResultMessage.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.im.message.NetworkMessage.ResultMessage;
	return proto.im.message.NetworkMessage.ResultMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.message.NetworkMessage.ResultMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.message.NetworkMessage.ResultMessage}
 */
proto.im.message.NetworkMessage.ResultMessage.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {number} */ (reader.readInt32());
				msg.setType(value);
				break;
			case 2:
				var value = /** @type {boolean} */ (reader.readBool());
				msg.setResult(value);
				break;
			case 3:
				var value = /** @type {string} */ (reader.readString());
				msg.setReason(value);
				break;
			case 4:
				var value = /** @type {string} */ (reader.readString());
				msg.setContent(value);
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.im.message.NetworkMessage.ResultMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.ResultMessage.serializeBinaryToWriter = function(message, writer) {
	message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.message.NetworkMessage.ResultMessage.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	this.serializeBinaryToWriter(writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.ResultMessage.prototype.serializeBinaryToWriter = function (writer) {
	var f = undefined;
	f = this.getType();
	if (f !== 0) {
		writer.writeInt32(
			1,
			f
		);
	}
	f = this.getResult();
	if (f) {
		writer.writeBool(
			2,
			f
		);
	}
	f = this.getReason();
	if (f.length > 0) {
		writer.writeString(
			3,
			f
		);
	}
	f = this.getContent();
	if (f.length > 0) {
		writer.writeString(
			4,
			f
		);
	}
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.im.message.NetworkMessage.ResultMessage} The clone.
 */
proto.im.message.NetworkMessage.ResultMessage.prototype.cloneMessage = function() {
	return /** @type {!proto.im.message.NetworkMessage.ResultMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.im.message.NetworkMessage.ResultMessage.prototype.getType = function() {
	return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.im.message.NetworkMessage.ResultMessage.prototype.setType = function(value) {
	jspb.Message.setField(this, 1, value);
};


/**
 * optional bool result = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.im.message.NetworkMessage.ResultMessage.prototype.getResult = function() {
	return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.im.message.NetworkMessage.ResultMessage.prototype.setResult = function(value) {
	jspb.Message.setField(this, 2, value);
};


/**
 * optional string reason = 3;
 * @return {string}
 */
proto.im.message.NetworkMessage.ResultMessage.prototype.getReason = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.ResultMessage.prototype.setReason = function(value) {
	jspb.Message.setField(this, 3, value);
};


/**
 * optional string content = 4;
 * @return {string}
 */
proto.im.message.NetworkMessage.ResultMessage.prototype.getContent = function() {
	return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.im.message.NetworkMessage.ResultMessage.prototype.setContent = function(value) {
	jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.im.message.NetworkMessage.BytesList = function(opt_data) {
	jspb.Message.initialize(this, opt_data, 0, -1, proto.im.message.NetworkMessage.BytesList.repeatedFields_, null);
};
goog.inherits(proto.im.message.NetworkMessage.BytesList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
	proto.im.message.NetworkMessage.BytesList.displayName = 'proto.im.message.NetworkMessage.BytesList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.im.message.NetworkMessage.BytesList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
	/**
	 * Creates an object representation of this proto suitable for use in Soy templates.
	 * Field names that are reserved in JavaScript and will be renamed to pb_name.
	 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	 * For the list of reserved names please see:
	 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	 *     for transitional soy proto support: http://goto/soy-param-migration
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.BytesList.prototype.toObject = function(opt_includeInstance) {
		return proto.im.message.NetworkMessage.BytesList.toObject(opt_includeInstance, this);
	};
	
	
	/**
	 * Static version of the {@see toObject} method.
	 * @param {boolean|undefined} includeInstance Whether to include the JSPB
	 *     instance for transitional soy proto support:
	 *     http://goto/soy-param-migration
	 * @param {!proto.im.message.NetworkMessage.BytesList} msg The msg instance to transform.
	 * @return {!Object}
	 */
	proto.im.message.NetworkMessage.BytesList.toObject = function(includeInstance, msg) {
		var f, obj = {
			bytelistList: msg.getBytelistList_asB64()
		};
		
		if (includeInstance) {
			obj.$jspbMessageInstance = msg;
		}
		return obj;
	};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.im.message.NetworkMessage.BytesList}
 */
proto.im.message.NetworkMessage.BytesList.deserializeBinary = function(bytes) {
	var reader = new jspb.BinaryReader(bytes);
	var msg = new proto.im.message.NetworkMessage.BytesList;
	return proto.im.message.NetworkMessage.BytesList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.im.message.NetworkMessage.BytesList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.im.message.NetworkMessage.BytesList}
 */
proto.im.message.NetworkMessage.BytesList.deserializeBinaryFromReader = function(msg, reader) {
	while (reader.nextField()) {
		if (reader.isEndGroup()) {
			break;
		}
		var field = reader.getFieldNumber();
		switch (field) {
			case 1:
				var value = /** @type {!Uint8Array} */ (reader.readBytes());
				msg.getBytelistList().push(value);
				msg.setBytelistList(msg.getBytelistList());
				break;
			default:
				reader.skipField();
				break;
		}
	}
	return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.im.message.NetworkMessage.BytesList} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.BytesList.serializeBinaryToWriter = function(message, writer) {
	message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.im.message.NetworkMessage.BytesList.prototype.serializeBinary = function() {
	var writer = new jspb.BinaryWriter();
	this.serializeBinaryToWriter(writer);
	return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.im.message.NetworkMessage.BytesList.prototype.serializeBinaryToWriter = function (writer) {
	var f = undefined;
	f = this.getBytelistList_asU8();
	if (f.length > 0) {
		writer.writeRepeatedBytes(
			1,
			f
		);
	}
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.im.message.NetworkMessage.BytesList} The clone.
 */
proto.im.message.NetworkMessage.BytesList.prototype.cloneMessage = function() {
	return /** @type {!proto.im.message.NetworkMessage.BytesList} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated bytes byteList = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.im.message.NetworkMessage.BytesList.prototype.getBytelistList = function() {
	return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 1));
};


/**
 * repeated bytes byteList = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getBytelistList()`
 * @return {!Array.<string>}
 */
proto.im.message.NetworkMessage.BytesList.prototype.getBytelistList_asB64 = function() {
	return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
		this.getBytelistList()));
};


/**
 * repeated bytes byteList = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytelistList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.im.message.NetworkMessage.BytesList.prototype.getBytelistList_asU8 = function() {
	return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
		this.getBytelistList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.im.message.NetworkMessage.BytesList.prototype.setBytelistList = function(value) {
	jspb.Message.setField(this, 1, value || []);
};


proto.im.message.NetworkMessage.BytesList.prototype.clearBytelistList = function() {
	jspb.Message.setField(this, 1, []);
};


goog.object.extend(exports, proto.im.message);
